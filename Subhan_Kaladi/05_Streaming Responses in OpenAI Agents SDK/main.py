from agents import Runner, Agent, OpenAIChatCompletionsModel, AsyncOpenAI, RunConfig
from openai.types.responses import ResponseTextDeltaEvent
import os
from dotenv import load_dotenv
import chainlit as cl

load_dotenv()

gemini_api_key = os.getenv("GEMINI_API_KEY")

external_client = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
)

model = OpenAIChatCompletionsModel(
    model="gemini-2.0-flash", openai_client=external_client
)

config = RunConfig(
    model=model,
    model_provider=external_client,
    tracing_disabled=True,
)


agent = Agent(
    name="Frontend Expert",
    instructions="You are a frontend expert",
)


@cl.on_chat_start
async def handle_start():
    cl.user_session.set("history", [])
    await cl.Message(
        content="Hello from Hammad Ai Assistent! How can i help you"
    ).send()


@cl.on_message
async def handle_message(message: cl.Message):
    history = cl.user_session.get("history")
    history.append({"role": "user", "content": message.content})

    msg = cl.Message(content="")
    await msg.send()
    #Creates a blank message placeholder (msg) and sends it, which allows streaming 
    # of tokens (word-by-word) in the next steps.

    result = Runner.run_streamed(agent, input=history, run_config=config)
    # Runs the agent in streamed mode, using the full conversation history as input. result is a stream-enabled object.

    async for event in result.stream_events():
        # Starts an async loop to stream tokens as they're generated by the model.
        if event.type == "raw_response_event" and isinstance(
            event.data, ResponseTextDeltaEvent
        ):
        # Checks if the current stream event is a partial text update (ResponseTextDeltaEvent), which contains a new word/token.    
            
            await msg.stream_token(event.data.delta)
            # Appends the new token (delta) to the blank message created earlier, so it appears like the assistant is typing live.

    history.append({"role": "assistant", "content": result.final_output})
    cl.user_session.set("history", history)
